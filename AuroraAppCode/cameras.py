# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'cameras.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pyodbc
import pickle
import cv2
import face_recognition
import os
import numpy as np
import threading
import settingController
import datetime
import screenshots
import headSettingsController

DETECTION_FRAME_THICKNESS = 1

OBJECTS_ON_FRAME_COUNTER_FONT = cv2.FONT_HERSHEY_SIMPLEX
OBJECTS_ON_FRAME_COUNTER_FONT_SIZE = 0.5


LINE_COLOR = (0, 0, 255)
LINE_THICKNESS = 3
LINE_COUNTER_FONT = cv2.FONT_HERSHEY_DUPLEX
LINE_COUNTER_FONT_SIZE = 2.0
LINE_COUNTER_POSITION = (20, 45)


class Ui_CameraMainWindow(object):

    def __init__(self):
        self.names = []  # names of images
        self.images = []
        self.c=0
        self.value = 0
        self.sc=0
        self.bool=True

    def setupUi(self, CameraMainWindow):
        CameraMainWindow.setObjectName("CameraMainWindow")
        CameraMainWindow.resize(808, 559)
        CameraMainWindow.showMaximized()
        CameraMainWindow.setStyleSheet("QMainWindow{\n"
"background-image: url(images/new.png);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(CameraMainWindow)
        self.centralwidget.setStyleSheet("QVBoxLayout{\n"
"background-image: url(images/new.png);\n"
"}")
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout3 = QtWidgets.QVBoxLayout()
        self.verticalLayout3.setObjectName("verticalLayout3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setStyleSheet("font: 87 12pt \"Arial Black\";")
        self.label_2.setObjectName("label_2")
        self.verticalLayout3.addWidget(self.label_2)
        self.listView_2 = QtWidgets.QListWidget(self.centralwidget)
        self.listView_2.setObjectName("listView_2")
        self.verticalLayout3.addWidget(self.listView_2)
        self.horizontalLayout.addLayout(self.verticalLayout3)
        self.verticalWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalWidget_2.setObjectName("verticalWidget_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalWidget_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_3.addLayout(self.horizontalLayout_3)
        self.label_3 = QtWidgets.QLabel(self.verticalWidget_2)
        self.label_3.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label_3.setText("")
        self.label_3.setMaximumSize(630,490)
        self.label_3.setObjectName("label_3")
        self.listView_2.itemDoubleClicked.connect(lambda:self.action(self.listView_2.currentItem().text()))
        self.listView_2.itemClicked.connect(lambda: self.action2(self.listView_2.currentItem().text()))
        self.verticalLayout_3.addWidget(self.label_3)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setContentsMargins(20, -1, 20, -1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.stopbtn = QtWidgets.QPushButton(self.verticalWidget_2)
        self.stopbtn.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/718-512.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.stopbtn.setIcon(icon)
        self.stopbtn.setIconSize(QtCore.QSize(80, 80))
        self.stopbtn.setFlat(True)
        self.stopbtn.setObjectName("stopbtn")
        #self.stopbtn.clicked.connect(lambda:self.action())
        self.verticalLayout_2.addWidget(self.stopbtn)
        self.stopbtn.clicked.connect(lambda:self.close_clicked())
        self.label_5 = QtWidgets.QLabel(self.verticalWidget_2)
        self.label_5.setStyleSheet("font: 87 12pt \"Arial Black\";")
        self.label_5.setObjectName("label_5")
        self.verticalLayout_2.addWidget(self.label_5)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalWidget = QtWidgets.QWidget(self.verticalWidget_2)
        self.verticalWidget.setObjectName("verticalWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalWidget)
        self.verticalLayout.setContentsMargins(20, 0, 20, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.screenshotbtn = QtWidgets.QPushButton(self.verticalWidget)
        self.screenshotbtn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/40974-200.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.screenshotbtn.setIcon(icon1)
        self.screenshotbtn.setIconSize(QtCore.QSize(80, 80))
        self.screenshotbtn.setFlat(True)
        self.screenshotbtn.setObjectName("screenshotbtn")
        self.screenshotbtn.clicked.connect(lambda:self.go_to_screenshot(CameraMainWindow))
        self.verticalLayout.addWidget(self.screenshotbtn)
        self.label = QtWidgets.QLabel(self.verticalWidget)
        self.label.setStyleSheet("font: 87 12pt \"Arial Black\";")
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.verticalLayout.setStretch(0, 7)
        self.verticalLayout.setStretch(1, 1)
        self.horizontalLayout_2.addWidget(self.verticalWidget)
        self.horizontalWidget = QtWidgets.QWidget(self.verticalWidget_2)
        self.horizontalWidget.setObjectName("horizontalWidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.horizontalWidget)
        self.verticalLayout_4.setContentsMargins(20, 0, 20, 0)
        self.verticalLayout_4.setSpacing(15)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.settingsbtn = QtWidgets.QPushButton(self.horizontalWidget)
        self.settingsbtn.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/00599149e2ec717872085650fc8c1f05-seo-settings-colored-stroke-icon-by-vexels.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.settingsbtn.setIcon(icon2)
        self.settingsbtn.setIconSize(QtCore.QSize(70, 70))
        self.settingsbtn.setFlat(True)
        self.settingsbtn.setObjectName("settingsbtn")
        self.settingsbtn.clicked.connect(lambda:self.go_to_settings())
        self.verticalLayout_4.addWidget(self.settingsbtn)
        self.label_4 = QtWidgets.QLabel(self.horizontalWidget)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_4.addWidget(self.label_4)
        self.horizontalLayout_2.addWidget(self.horizontalWidget)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.verticalLayout_3.setStretch(0, 1)
        self.verticalLayout_3.setStretch(1, 10)
        self.verticalLayout_3.setStretch(2, 1)
        self.horizontalLayout.addWidget(self.verticalWidget_2)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 2)
        self.camWindow=CameraMainWindow
        CameraMainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(CameraMainWindow)
        QtCore.QMetaObject.connectSlotsByName(CameraMainWindow)

        self.camera_names()
        threading.Timer(10, lambda: self.screenshot(), None, None).start()
        #
        # encodeList = []
        # faceCascade = cv2.CascadeClassifier("inputs/haarcascade_frontalface_default.xml")
        #
        # # find directory of images
        # Directory = os.path.dirname(os.path.abspath(__file__))  # return directory of current file
        # path = os.path.join(Directory,
        #                     "Image_Recognition")  # open path directory, bas bte3mol joining lal directory ma3 folder images fa sar ma3na new directory
        # myList = os.listdir(path)
        #
        # for cls in myList:
        #     img = cv2.imread(os.path.join(path, cls))
        #     self.images.append(img)
        #     self.names.append(os.path.splitext(cls)[0])  # gets name without .jpg
        #
        # def FindEncodings(images):
        #     encodeList = []
        #     for img in images:
        #         img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        #         encode = face_recognition.face_encodings(img)[0]
        #         encodeList.append(encode)
        #     return encodeList
        #
        # self.encodeList = FindEncodings(self.images)

    def retranslateUi(self, CameraMainWindow):
        _translate = QtCore.QCoreApplication.translate
        CameraMainWindow.setWindowTitle(_translate("CameraMainWindow", "MainWindow"))
        self.label_2.setText(_translate("CameraMainWindow", "<html><head/><body><p align=\"center\">List of cameras:</p></body></html>"))
        self.label_5.setText(_translate("CameraMainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Stop</span></p></body></html>"))
        self.label.setText(_translate("CameraMainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#e12534;\">List of Screenshots</span></p></body></html>"))
        self.label_4.setText(_translate("CameraMainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600; color:#e12534;\">Settings</span></p></body></html>"))


    def action(self,str):
        s=str.split(": ")
        room=s[1]
        print (room)
        server = 'Nurkanaan\sqlexpress'
        database = 'senior'
        conn = pyodbc.connect('DRIVER={ODBC Driver 13 for SQL Server}; \
                                                                      SERVER=' + server + '; \
                                                                      DATABASE=' + database + '; \
                                                                      Trusted_Connection=yes;')
        cursor = conn.cursor()
        query=("select id,ip from cameraInfo where roomNumber =?")
        cursor.execute(query,room)
        result=cursor.fetchone()
        id=result[0]
        ip=result[1]
        print(ip)
        self.camera1(id,ip)

    def action2(self,str):
        s=str.split(": ")
        room=s[1]
        print (room)
        server = 'Nurkanaan\sqlexpress'
        database = 'senior'
        conn = pyodbc.connect('DRIVER={ODBC Driver 13 for SQL Server}; \
                                                                      SERVER=' + server + '; \
                                                                      DATABASE=' + database + '; \
                                                                      Trusted_Connection=yes;')
        cursor = conn.cursor()
        query=("select id,ip from cameraInfo where roomNumber =?")
        cursor.execute(query,room)
        result=cursor.fetchone()
        id=result[0]
        pickle.dump(id,open("sc.dat","wb"))

    def screenshot(self):
        self.value =2
        threading.Timer(300, lambda: self.screenshot(), None, None).start()

    def camera1(self,id,ip):
            # detect and recognize and count faces
         try:
                if ip=="0":
                    ip=int(ip)

                self.sc = id
                camera = cv2.VideoCapture(ip)
                self.bool=True
                while (self.bool==True):
                    if cv2.waitKey(1) & 0xFF == ord('q'):
                        break
                    success, img = camera.read()
                    # while camera.isOpened():
                    if success:
                        # img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                         facesLocation = face_recognition.face_locations(img)  # get location of all faces in image
                        # faceEncode = face_recognition.face_encodings(img, facesLocation)

                        # # now find matches of faces
                         for location in facesLocation:  # check each encoded face
                        #     matches = face_recognition.compare_faces(self.encodeList, encode)
                        #     faceDist = face_recognition.face_distance(self.encodeList, encode)
                        #     print(faceDist)
                        #     matchIndex = np.argmin(faceDist)  # get index of min distance which is the better match
                        #     # )
                        #     if matches[matchIndex]:
                        #         cv2.putText(img, "Person: " + str(len(facesLocation)), (30, 100),
                        #                     OBJECTS_ON_FRAME_COUNTER_FONT, 0.8,
                        #                     (255, 0, 0), 2)
                        #         y1, x2, y2, x1 = location
                        #         cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), DETECTION_FRAME_THICKNESS)
                        #         name = self.names[matchIndex].upper()
                        #         cv2.putText(img, name, (x1 + 6, y1 - 4), cv2.FONT_HERSHEY_COMPLEX, 0.8, (0, 255, 0), 2)
                        #     else:
                            cv2.putText(img, "Person: " + str(len(facesLocation)), (30, 100),
                                        OBJECTS_ON_FRAME_COUNTER_FONT, 0.8,
                                        (255, 0, 0), 2)
                            y1, x2, y2, x1 = location
                            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), DETECTION_FRAME_THICKNESS)
                            cv2.putText(img, "PERSON", (x1 + 6, y1 - 4), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

                            if self.value == 2:
                                c = datetime.datetime.now()
                                self.add_image(c, img, id, len(facesLocation))
                                # cv2.imwrite('C:/Users/nur/Desktop/senior project/0/%d-%d-%d-Time(%d-%d-%d).png'%(c.day,c.month,c.year,c.hour,c.minute,c.second),img)
                                self.value = 1

                            self.display_image(img)
                self.label_3.setPixmap(QtGui.QPixmap("images/black.jpg"))
                camera.release()
                cv2.destroyAllWindows()
         except:
            m =QtWidgets. QMessageBox()
            msg1 = "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600;\">Cannot connect to camera!</span></p><p>please check internet connection.</p></body></html>"
            m.setText(msg1)
            m.setStandardButtons(QtWidgets.QMessageBox.Ok)
            m.setWindowTitle("AURORA")
            m.setIcon(QtWidgets.QMessageBox.Information)
            reply = m.exec()

    def display_image(self,img):
        qformat = QtGui.QImage.Format_Indexed8
        if len(img.shape) == 3:
            if img.shape[2] == 4:
                qformat = QtGui.QImage.Format_RGBA8888
            else:
                qformat = QtGui.QImage.Format_RGB888
        img = QtGui.QImage(img, img.shape[1], img.shape[0], qformat)
        img = img.rgbSwapped()
        self.label_3.setPixmap(QtGui.QPixmap.fromImage(img))

    def camera_names(self):
        server = 'Nurkanaan\sqlexpress'
        database = 'senior'
        conn = pyodbc.connect('DRIVER={ODBC Driver 13 for SQL Server}; \
                                                              SERVER=' + server + '; \
                                                              DATABASE=' + database + '; \
                                                              Trusted_Connection=yes;')
        cursor = conn.cursor()
        email = pickle.load(open("email.dat","rb"))
        type_query="select department from headsInfo where email=?"
        cursor.execute(type_query,email)
        result = cursor.fetchone()
        if result==None:
            query="select * from cameraInfo"
            cursor.execute(query)
            newResult = cursor.fetchall()
            for i in newResult:
                s = i[2]+" room: " + i[1]
                self.listView_2.addItem(s)
        else:
                query = "select * from cameraInfo where department = ?"
                cursor.execute(query,result[0])
                newResult = cursor.fetchall()
                for i in newResult:
                    s = "room: " + i[1]
                    self.listView_2.addItem(s)

    def go_to_settings(self):
        server = 'Nurkanaan\sqlexpress'
        database = 'senior'
        conn = pyodbc.connect('DRIVER={ODBC Driver 13 for SQL Server}; \
                                                                 SERVER=' + server + '; \
                                                                 DATABASE=' + database + '; \
                                                                 Trusted_Connection=yes;')
        cursor = conn.cursor()
        email = pickle.load(open("email.dat", "rb"))
        type_query = "select department from headsInfo where email=?"
        cursor.execute(type_query, email)
        result = cursor.fetchone()
        self.bool = False
        print(result)
        if result==None:
            self.window = QtWidgets.QMainWindow()
            self.ui = settingController.SettingsMainWindow()
            self.camWindow.close()
        else:
            self.window = QtWidgets.QMainWindow()
            self.ui = headSettingsController.headSettingsMainWindow()
            self.camWindow.close()

    def close_clicked(self):
        self.bool=False

    def add_image(self,c,img,id,person):
        Directory = os.path.dirname(os.path.abspath(__file__))  # return directory of current file
        path = os.path.join(Directory,"%d"%id)
        if not os.path.exists(path):
           os.mkdir(path)
        cv2.imwrite('%s/%d-%d-%d-Time-%d-%d-%d-persons-%d.png'%(path,c.day,c.month,c.year,c.hour,c.minute,c.second,person),img)


    def go_to_screenshot(self,CameraMainWindow):
        cameraValue=pickle.load(open("sc.dat","rb"))
        if cameraValue=="no":
            m = QtWidgets.QMessageBox()
            msg1 = "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600;\">No selected camera!</span></p><p>please select a camera before you continue</p></body></html>"
            m.setText(msg1)
            m.setStandardButtons(QtWidgets.QMessageBox.Ok)
            m.setWindowTitle("AURORA")
            m.setIcon(QtWidgets.QMessageBox.Information)
            m.exec()
        else:
            self.bool = False
            pickle.dump(self.sc, open("sc.dat", "wb"))
            self.window=QtWidgets.QMainWindow()
            self.ui= screenshots.Ui_ScreenShots()
            self.ui.setupUi(self.window)
            self.window.show()
            CameraMainWindow.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    CameraMainWindow = QtWidgets.QMainWindow()
    ui = Ui_CameraMainWindow()
    ui.setupUi(CameraMainWindow)
    CameraMainWindow.show()
    sys.exit(app.exec_())
